                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2f8ffffffffffffff |         iaddq $-8,%rdx          # For loop unrolling
0x03e: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x040: 72ba01000000000000   | 	jl Unroll7     		# if so, goto Unroll:
                            | 
0x049: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x053: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x05d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x05f: 717200000000000000   | 	jle Npos		# if so, goto Npos:
0x068: c0f00100000000000000 | 	iaddq $1, %rax  	# count++
0x072: 50a70800000000000000 | Npos:   mrmovq 8(%rdi), %r10
0x07c: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x086: 62aa                 |         andq %r10, %r10
0x088: 719b00000000000000   |         jle Npos2
0x091: c0f00100000000000000 |         iaddq $1, %rax
0x09b: 50a71000000000000000 | Npos2:  mrmovq 16(%rdi), %r10
0x0a5: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)
0x0af: 62aa                 |         andq %r10, %r10
0x0b1: 71c400000000000000   |         jle Npos3
0x0ba: c0f00100000000000000 |         iaddq $1, %rax
0x0c4: 50a71800000000000000 | Npos3:  mrmovq 24(%rdi), %r10
0x0ce: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x0d8: 62aa                 |         andq %r10, %r10
0x0da: 71ed00000000000000   |         jle Npos4
0x0e3: c0f00100000000000000 |         iaddq $1, %rax
0x0ed: 50a72000000000000000 | Npos4:  mrmovq 32(%rdi), %r10
0x0f7: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x101: 62aa                 |         andq %r10, %r10
0x103: 711601000000000000   |         jle Npos5
0x10c: c0f00100000000000000 |         iaddq $1, %rax
0x116: 50a72800000000000000 | Npos5:  mrmovq 40(%rdi), %r10
0x120: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x12a: 62aa                 |         andq %r10, %r10
0x12c: 713f01000000000000   |         jle Npos6
0x135: c0f00100000000000000 |         iaddq $1, %rax
0x13f: 50a73000000000000000 | Npos6:  mrmovq 48(%rdi), %r10
0x149: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x153: 62aa                 |         andq %r10, %r10
0x155: 716801000000000000   |         jle Npos7
0x15e: c0f00100000000000000 |         iaddq $1, %rax
0x168: 50a73800000000000000 | Npos7:  mrmovq 56(%rdi), %r10
0x172: 40a63800000000000000 |         rmmovq %r10, 56(%rsi)
0x17c: 62aa                 |         andq %r10, %r10
0x17e: 719101000000000000   |         jle Npos8
0x187: c0f00100000000000000 |         iaddq $1, %rax
0x191: c0f2f8ffffffffffffff | Npos8:  iaddq $-8, %rdx         # len -= 8
0x19b: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x1a5: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1af: 6222                 | 	andq %rdx,%rdx		# len >= 0?
0x1b1: 754900000000000000   | 	jge Loop		# if so, goto Loop:
0x1ba: c0f20100000000000000 | Unroll7:iaddq $1, %rdx          # Is seven elements left?
0x1c4: 74ff01000000000000   |         jne Unroll6             # if not so, goto Unroll6:
0x1cd: 50a73000000000000000 | Seven:  mrmovq 48(%rdi), %r10
0x1d7: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x1e1: 62aa                 |         andq %r10, %r10
0x1e3: 711202000000000000   |         jle Six
0x1ec: c0f00100000000000000 |         iaddq $1, %rax
0x1f6: 701202000000000000   |         jmp Six
0x1ff: c0f20100000000000000 | Unroll6:iaddq $1, %rdx          # Is six elements left?
0x209: 744402000000000000   |         jne Unroll5             # if not so, goto Unroll5:
0x212: 50a72800000000000000 | Six:  mrmovq 40(%rdi), %r10
0x21c: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x226: 62aa                 |         andq %r10, %r10
0x228: 715702000000000000   |         jle Five
0x231: c0f00100000000000000 |         iaddq $1, %rax
0x23b: 705702000000000000   |         jmp Five
0x244: c0f20100000000000000 | Unroll5:iaddq $1, %rdx          # Is five elements left?
0x24e: 748902000000000000   |         jne Unroll4             # if not so, goto Unroll4:
0x257: 50a72000000000000000 | Five:   mrmovq 32(%rdi), %r10
0x261: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x26b: 62aa                 |         andq %r10, %r10
0x26d: 719c02000000000000   |         jle Four
0x276: c0f00100000000000000 |         iaddq $1, %rax
0x280: 709c02000000000000   |         jmp Four
0x289: c0f20100000000000000 | Unroll4:iaddq $1, %rdx          # Is four elements left?
0x293: 74ce02000000000000   |         jne Unroll3             # if not so, goto Unroll2:
0x29c: 50a71800000000000000 | Four:   mrmovq 24(%rdi), %r10
0x2a6: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x2b0: 62aa                 |         andq %r10, %r10
0x2b2: 71e102000000000000   |         jle Three
0x2bb: c0f00100000000000000 |         iaddq $1, %rax
0x2c5: 70e102000000000000   |         jmp Three
0x2ce: c0f20100000000000000 | Unroll3:iaddq $1, %rdx          # Is three elements left?
0x2d8: 741303000000000000   |         jne Unroll2             # if not so, goto Unroll2:
0x2e1: 50a71000000000000000 | Three:  mrmovq 16(%rdi), %r10
0x2eb: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)
0x2f5: 62aa                 |         andq %r10, %r10
0x2f7: 712603000000000000   |         jle Two
0x300: c0f00100000000000000 |         iaddq $1, %rax
0x30a: 702603000000000000   |         jmp Two
0x313: c0f20100000000000000 | Unroll2:iaddq $1, %rdx         # Is two elements left?
0x31d: 745803000000000000   |         jne Unroll1            # if not so, goto Unroll1:
0x326: 50a70800000000000000 | Two:    mrmovq 8(%rdi), %r10
0x330: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x33a: 62aa                 |         andq %r10, %r10
0x33c: 716b03000000000000   |         jle One
0x345: c0f00100000000000000 |         iaddq $1, %rax
0x34f: 706b03000000000000   |         jmp One
0x358: c0f20100000000000000 | Unroll1:iaddq $1, %rdx         # Is one element left?
0x362: 749403000000000000   |         jne Done               # if not so, goto Done:
0x36b: 50a70000000000000000 | One:    mrmovq (%rdi), %r10
0x375: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x37f: 62aa                 |         andq %r10, %r10
0x381: 719403000000000000   |         jle Done
0x38a: c0f00100000000000000 |         iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x394:                      | Done:
0x394: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x395:                      | End:
                            | #/* $end ncopy-ys */
0x395:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x398:                      | 	.align 8
0x398:                      | src:
0x398: ffffffffffffffff     | 	.quad -1
0x3a0: feffffffffffffff     | 	.quad -2
0x3a8: 0300000000000000     | 	.quad 3
0x3b0: 0400000000000000     | 	.quad 4
0x3b8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3c0:                      | 	.align 16
0x3c0:                      | Predest:
0x3c0: fadebc0000000000     | 	.quad 0xbcdefa
0x3c8:                      | dest:
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8:                      | Postdest:
0x3e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3f0:                      | .align 8
                            | # Run time stack
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
                            | 
0x470:                      | Stack:
