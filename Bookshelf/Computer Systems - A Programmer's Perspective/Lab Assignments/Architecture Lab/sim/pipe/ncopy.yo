                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6300                 | 	xorq %rax,%rax		# count = 0;
0x002: c0f2f8ffffffffffffff |         iaddq $-8,%rdx          # For loop unrolling
0x00c: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x00e: 72c401000000000000   | 	jl Unroll7     		# if so, goto Unroll:
                            | 
0x017: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x021: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x02b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x02d: 714000000000000000   | 	jle Npos		# if so, goto Npos:
0x036: c0f00100000000000000 | 	iaddq $1, %rax  	# count++
0x040: 50a70800000000000000 | Npos:   mrmovq 8(%rdi), %r10
0x04a: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x054: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x05e: 62aa                 |         andq %r10, %r10
0x060: 717300000000000000   |         jle Npos2
0x069: c0f00100000000000000 |         iaddq $1, %rax
0x073: 50a71000000000000000 | Npos2:  mrmovq 16(%rdi), %r10
0x07d: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x087: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)
0x091: 62aa                 |         andq %r10, %r10
0x093: 71a600000000000000   |         jle Npos3
0x09c: c0f00100000000000000 |         iaddq $1, %rax
0x0a6: 50a71800000000000000 | Npos3:  mrmovq 24(%rdi), %r10
0x0b0: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x0ba: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x0c4: 62aa                 |         andq %r10, %r10
0x0c6: 71d900000000000000   |         jle Npos4
0x0cf: c0f00100000000000000 |         iaddq $1, %rax
0x0d9: 50a72000000000000000 | Npos4:  mrmovq 32(%rdi), %r10
0x0e3: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x0ed: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x0f7: 62aa                 |         andq %r10, %r10
0x0f9: 710c01000000000000   |         jle Npos5
0x102: c0f00100000000000000 |         iaddq $1, %rax
0x10c: 50a72800000000000000 | Npos5:  mrmovq 40(%rdi), %r10
0x116: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x120: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x12a: 62aa                 |         andq %r10, %r10
0x12c: 713f01000000000000   |         jle Npos6
0x135: c0f00100000000000000 |         iaddq $1, %rax
0x13f: 50a73000000000000000 | Npos6:  mrmovq 48(%rdi), %r10
0x149: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x153: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x15d: 62aa                 |         andq %r10, %r10
0x15f: 717201000000000000   |         jle Npos7
0x168: c0f00100000000000000 |         iaddq $1, %rax
0x172: 50a73800000000000000 | Npos7:  mrmovq 56(%rdi), %r10
0x17c: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x186: 40a63800000000000000 |         rmmovq %r10, 56(%rsi)
0x190: 62aa                 |         andq %r10, %r10
0x192: 71a501000000000000   |         jle Npos8
0x19b: c0f00100000000000000 |         iaddq $1, %rax
0x1a5: c0f74000000000000000 | Npos8:  iaddq $64, %rdi		# src++
0x1af: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1b9: 6222                 | 	andq %rdx,%rdx		# len >= 0?
0x1bb: 751700000000000000   | 	jge Loop		# if so, goto Loop:
0x1c4: c0f20100000000000000 | Unroll7:iaddq $1, %rdx          # Is seven elements left?
0x1ce: 740902000000000000   |         jne Unroll6             # if not so, goto Unroll6:
0x1d7: 50a73000000000000000 | Seven:  mrmovq 48(%rdi), %r10
0x1e1: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x1eb: 62aa                 |         andq %r10, %r10
0x1ed: 711c02000000000000   |         jle Six
0x1f6: c0f00100000000000000 |         iaddq $1, %rax
0x200: 701c02000000000000   |         jmp Six
0x209: c0f20100000000000000 | Unroll6:iaddq $1, %rdx          # Is six elements left?
0x213: 744e02000000000000   |         jne Unroll5             # if not so, goto Unroll5:
0x21c: 50a72800000000000000 | Six:    mrmovq 40(%rdi), %r10
0x226: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x230: 62aa                 |         andq %r10, %r10
0x232: 716102000000000000   |         jle Five
0x23b: c0f00100000000000000 |         iaddq $1, %rax
0x245: 706102000000000000   |         jmp Five
0x24e: c0f20100000000000000 | Unroll5:iaddq $1, %rdx          # Is five elements left?
0x258: 749302000000000000   |         jne Unroll4             # if not so, goto Unroll4:
0x261: 50a72000000000000000 | Five:   mrmovq 32(%rdi), %r10
0x26b: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x275: 62aa                 |         andq %r10, %r10
0x277: 71a602000000000000   |         jle Four
0x280: c0f00100000000000000 |         iaddq $1, %rax
0x28a: 70a602000000000000   |         jmp Four
0x293: c0f20100000000000000 | Unroll4:iaddq $1, %rdx          # Is four elements left?
0x29d: 74d802000000000000   |         jne Unroll3             # if not so, goto Unroll2:
0x2a6: 50a71800000000000000 | Four:   mrmovq 24(%rdi), %r10
0x2b0: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x2ba: 62aa                 |         andq %r10, %r10
0x2bc: 71eb02000000000000   |         jle Three
0x2c5: c0f00100000000000000 |         iaddq $1, %rax
0x2cf: 70eb02000000000000   |         jmp Three
0x2d8: c0f20100000000000000 | Unroll3:iaddq $1, %rdx          # Is three elements left?
0x2e2: 741d03000000000000   |         jne Unroll2             # if not so, goto Unroll2:
0x2eb: 50a71000000000000000 | Three:  mrmovq 16(%rdi), %r10
0x2f5: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)
0x2ff: 62aa                 |         andq %r10, %r10
0x301: 713003000000000000   |         jle Two
0x30a: c0f00100000000000000 |         iaddq $1, %rax
0x314: 703003000000000000   |         jmp Two
0x31d: c0f20100000000000000 | Unroll2:iaddq $1, %rdx         # Is two elements left?
0x327: 746203000000000000   |         jne Unroll1            # if not so, goto Unroll1:
0x330: 50a70800000000000000 | Two:    mrmovq 8(%rdi), %r10
0x33a: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x344: 62aa                 |         andq %r10, %r10
0x346: 717503000000000000   |         jle One
0x34f: c0f00100000000000000 |         iaddq $1, %rax
0x359: 707503000000000000   |         jmp One
0x362: c0f20100000000000000 | Unroll1:iaddq $1, %rdx         # Is one element left?
0x36c: 749e03000000000000   |         jne Done               # if not so, goto Done:
0x375: 50a70000000000000000 | One:    mrmovq (%rdi), %r10
0x37f: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x389: 62aa                 |         andq %r10, %r10
0x38b: 719e03000000000000   |         jle Done
0x394: c0f00100000000000000 |         iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x39e:                      | Done:
0x39e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x39f:                      | End:
                            | #/* $end ncopy-ys */
