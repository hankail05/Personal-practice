#lang sicp
(#%require (lib "27.ss" "srfi"))
(define (search-for-primes n count)
  (define (timed-prime-test n)
    (define (start-prime-test n start-time)
      (define (fast-prime? n times)
        (define (square x) (* x x))
        (define (fermat-test n)
          (define (expmod base exp m)
            (define (fast-expt b n)
              (define (square x) (* x x))
              (define (even? n) (= (remainder n 2) 0))
              (define (fast-expt-iter b exp n)
                (cond ((= n 0) exp)
                      ((even? n) (fast-expt-iter (square b) exp (/ n 2)))
                      (else (fast-expt-iter b (* b exp) (- n 1)))))
              (fast-expt-iter b 1 n))
            (remainder (fast-expt base exp) m))
          (define (try-it a)
            (= (expmod a n n) a))
          (try-it (+ 1 (random-integer (- n 1)))))
        (cond ((= times 0) true)
              ((fermat-test n) (fast-prime? n (- times 1)))
              (else false)))
      (define (report-prime elapsed-time)
        (newline)
        (display n)
        (display " *** ")
        (display elapsed-time))
      (if (fast-prime? n 100) (report-prime (- (runtime) start-time)) false))
    (start-prime-test n (runtime)))
  (cond ((= count 0) (newline))
        ((= (remainder n 2) 0) (search-for-primes (+ 1 n) count))
        ((not (timed-prime-test n)) (search-for-primes (+ 2 n) count))
        (else (search-for-primes (+ 2 n) (- count 1)))))

(search-for-primes 1000000000 3) ; too slow

; New expmod handles extremely large number as long as input is, unlikely old expmod handles numbers less than m.