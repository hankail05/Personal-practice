#lang sicp
(define (entry tree) (car tree))
(define (key-entry entry) (car entry))
(define (value-entry entry) (cdr entry))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree key value left right)
  (list (cons key value) left right))
(define (make-leaf key value)
  (make-tree key value nil nil))
(define (set-value-entry! tree value)
  (set-cdr! (entry tree) value))
(define (set-left-branch! tree left)
  (set-car! (cdr tree) left))
(define (set-right-branch! tree right)
  (set-car! (cddr tree) right))


(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key)
      (define (iter key tree)
        (cond ((null? tree) false)
              ((= key (key-entry (entry tree))) (value-entry (entry tree)))
              ((> key (key-entry (entry tree))) (iter key (right-branch tree)))
              ((< key (key-entry (entry tree))) (iter key (left-branch tree)))))
      (iter key (cdr local-table)))
    (define (insert! key value)
      (define (iter key value tree)
        (cond ((eq? '*table* (car tree)) (if (null? (cdr tree))
                                             (set-cdr! tree (make-leaf key value))
                                             (iter key value (cdr local-table))))
              ((= key (key-entry (entry tree))) (set-value-entry! tree value))
              ((> key (key-entry (entry tree)))
               (if (null? (right-branch tree))
                   (set-right-branch! tree (make-leaf key value))
                   (iter key value (right-branch tree))))
              ((< key (key-entry (entry tree)))
               (if (null? (left-branch tree))
                   (set-left-branch! tree (make-leaf key value))
                   (iter key value (left-branch tree))))))
      (iter key value local-table)
      'ok)
    (define (print) local-table)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'print-proc) print)
            (else (error "Unknown operation - TABLE" m))))
    dispatch))


(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
(define print (operation-table 'print-proc))

(put 4 7)
(put 2 1)
(put 5 2)
(put 1 3)
(put 6 4)
(put 3 5)
(put 7 6)
(get 1)
(get 8)
(get 4)
(print)