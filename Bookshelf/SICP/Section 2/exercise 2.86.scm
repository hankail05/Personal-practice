#lang sicp
(define global-array '())
(define (make-entry k v) (list k v))
(define (key entry) (car entry))
(define (value entry) (cadr entry))
(define (put op type item)
  (define (put-helper k array)
    (cond ((null? array) (list (make-entry k item)))
          ((equal? (key (car array)) k) array)
          (else (cons (car array) (put-helper k (cdr array))))))
  (set! global-array (put-helper (list op type) global-array)))
(define (get op type)
  (define (get-helper k array)
    (cond ((null? array) #f)
          ((equal? (key (car array)) k) (value (car array)))
          (else (get-helper k (cdr array)))))
  (get-helper (list op type) global-array))
; get/put


(define (attach-tag type-tag contents) (cons type-tag contents))
(define (type-tag datum)
  (if (pair? datum) (car datum) (error "Bad tagged datum -- TYPE-TAG" datum)))
(define (contents datum)
  (if (pair? datum) (cdr datum) (error "Bad tagged datum -- CONTENTS" datum)))

(define (apply-generic op . args)
  (define type-tower (list (list 'integer 1) (list 'rational 2) (list 'real 3) (list 'complex 4)))
  (define (type-rank type tower) (cond ((null? tower) (error "Undefined type"))
                                       ((eq? type (type-tag (car tower))) (car (contents (car tower))))
                                       (else (type-rank type (cdr tower)))))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (cond (proc (if (or (eq? op 'add) (eq? op 'sub) (eq? op 'mul) (eq? op 'div))
                      (drop (apply proc (map contents args)))
                      (apply proc (map contents args))))
            ((= (length args) 2) (let ((type-rank1 (type-rank (car type-tags) type-tower))
                                       (type-rank2 (type-rank (cadr type-tags) type-tower))
                                       (a1 (car args)) (a2 (cadr args)))
                                   (define (tower-coercion type-rank1 type-rank2 a1 a2)
                                     (cond ((< type-rank1 type-rank2) (tower-coercion (+ type-rank1 1) type-rank2 (raise a1) a2))
                                           ((> type-rank1 type-rank2) (tower-coercion type-rank1 (+ type-rank2 1) a1 (raise a2)))
                                           ((= type-rank1 type-rank2) (apply-generic op a1 a2))
                                           (else (error "No method for these types" (list op type-tags)))))
                                   (tower-coercion type-rank1 type-rank2 a1 a2)))
            (else
             (error "No method for these types" (list op type-tags)))))))


(define (install-integer-package)
  (define (tag x) (attach-tag 'integer x))
  (put 'add '(integer integer) (lambda (x y) (tag (+ x y))))
  (put 'sub '(integer integer) (lambda (x y) (tag (- x y))))
  (put 'mul '(integer integer) (lambda (x y) (tag (* x y))))
  (put 'div '(integer integer) (lambda (x y) (tag (/ x y))))
  (put 'equ '(integer integer) (lambda (x y) (= x y)))
  (put 'make 'integer (lambda (x) (tag x)))
  'done)

(define (make-integer n) ((get 'make 'integer) n))


(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d) (let ((g (gcd n d))) (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y)) (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y)) (* (denom x) (numer y))))
  (define (equ-rat x y)
    (= (* (numer x) (denom y)) (* (denom x) (numer y))))

  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div-rat x y))))
  (put 'equ '(rational rational) (lambda (x y) (equ-rat x y)))
  (put 'make 'rational (lambda (n d) (tag (make-rat n d))))
  'done)

(define (numer x) (car x))
(define (denom x) (cdr x))
(define (make-rational n d) ((get 'make 'rational) n d))


(define (install-real-package)
  (define (tag x) (attach-tag 'real x))
  (put 'add '(real real) (lambda (x y) (tag (+ x y))))
  (put 'sub '(real real) (lambda (x y) (tag (- x y))))
  (put 'mul '(real real) (lambda (x y) (tag (* x y))))
  (put 'div '(real real) (lambda (x y) (tag (/ x y))))
  (put 'equ '(real real) (lambda (x y) (= x y)))
  (put 'make 'real (lambda (x) (tag x)))
  'done)

(define (make-real n) ((get 'make 'real) n))


(define (install-complex-package)
  (define (square x) (apply-generic 'square x))
  (put 'square '(integer) (lambda (x) (make-integer (* x x))))
  (put 'square '(rational) (lambda (x) (make-real (expt (/ (numer x) (denom x)) 2))))
  (put 'square '(real) (lambda (x) (make-real (* x x))))
  
  (define (sqrt x) (apply-generic 'sqrt x))
  (put 'sqrt '(integer) (lambda (x) (make-real (expt x 0.5))))
  (put 'sqrt '(rational) (lambda (x) (make-real (expt (/ (numer x) (denom x)) 0.5))))
  ; hard to express square root of rational number
  (put 'sqrt '(real) (lambda (x) (make-real (expt x 0.5))))
  
  (define (sine x) (apply-generic 'sin x))
  (put 'sin '(integer) (lambda (x) (make-real (sin x))))
  (put 'sin '(rational) (lambda (x) (make-real (sin (/ (numer x) (denom x))))))
  (put 'sin '(real) (lambda (x) (make-real (sin x))))

  (define (cosine x) (apply-generic 'cos x))
  (put 'cos '(integer) (lambda (x) (make-real (cos x))))
  (put 'cos '(rational) (lambda (x) (make-real (cos (/ (numer x) (denom x))))))
  (put 'cos '(real) (lambda (x) (make-real (cos x))))

  (define (arctan x) (apply-generic 'atan x))
  (put 'atan '(integer) (lambda (x) (make-real (atan x))))
  (put 'atan '(rational) (lambda (x) (make-real (atan (/ (numer x) (denom x))))))
  (put 'atan '(real) (lambda (x) (make-real (atan x))))

  
  (define (install-rectangular-package)
    (define (real-part z) (car z))
    (define (imag-part z) (cdr z))
    (define (make-from-real-imag x y) (cons x y))
    (define (magnitude z) (sqrt (add (square (real-part z)) (square (imag-part z)))))
    (define (angle z) (arctan (div (imag-part z) (real-part z))))
    (define (make-from-mag-ang r a) (cons (mul r (cosine a)) (mul r (sine a))))

    (define (tag x) (attach-tag 'rectangular x))
    (put 'real-part '(rectangular) real-part)
    (put 'imag-part '(rectangular) imag-part)
    (put 'magnitude '(rectangular) magnitude)
    (put 'angle '(rectangular) angle)
    (put 'make-from-real-imag 'rectangular (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang 'rectangular (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)
  
  (define (install-polar-package)
    (define (magnitude z) (car z))
    (define (angle z) (cdr z))
    (define (make-from-mag-ang r a) (cons r a))
    (define (real-part z) (mul (magnitude z) (cosine (angle z))))
    (define (imag-part z) (mul (magnitude z) (sine (angle z))))
    (define (make-from-real-imag x y) (cons (sqrt (add (square x) (square y))) (arctan y x)))

    (define (tag x) (attach-tag 'polar x))
    (put 'real-part '(polar) real-part)
    (put 'imag-part '(polar) imag-part)
    (put 'magnitude '(polar) magnitude)
    (put 'angle '(polar) angle)
    (put 'make-from-real-imag 'polar (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang 'polar (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)

  (install-rectangular-package)
  (install-polar-package)

  (define (real-part z) (apply-generic 'real-part z))
  (define (imag-part z) (apply-generic 'imag-part z))
  (define (magnitude z) (apply-generic 'magnitude z))
  (define (angle z) (apply-generic 'angle z))
  (define (make-from-real-imag x y) ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a) ((get 'make-from-mag-ang 'polar) r a))

  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2)) (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2)) (add (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2)) (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2)) (sub (angle z1) (angle z2))))
  (define (equ-complex z1 z2)
    (and (and (eq? (type-tag (real-part z1)) (type-tag (real-part z2)))
              (eq? (type-tag (imag-part z1)) (type-tag (imag-part z2))))
         (and (= (contents (real-part z1)) (contents (real-part z2)))
              (= (contents (imag-part z1)) (contents (imag-part z2))))))

  (define (tag z) (attach-tag 'complex z))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'add '(complex complex) (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex) (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex) (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex) (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'equ '(complex complex) (lambda (z1 z2) (equ-complex z1 z2)))
  (put 'make-from-real-imag 'complex (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (make-complex-from-real-imag x y) ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a) ((get 'make-from-mag-ang 'complex) r a))


(define (install-raise-package)
  (define (raise-integer-to-rational n) (make-rational n 1))
  (define (raise-rational-to-real x) (make-real (/ (car x) (cdr x))))
  (define (raise-real-to-complex x) (make-complex-from-real-imag x (make-integer 0)))

  (put 'raise '(integer) raise-integer-to-rational)
  (put 'raise '(rational) raise-rational-to-real)
  (put 'raise '(real) raise-real-to-complex)
  'done)

(define (raise x) (apply-generic 'raise x))


(define (drop x)
  (let ((dropped (project x)))
    (cond ((eq? (type-tag x) 'integer) x)
          ((equ? x (raise dropped)) (drop dropped))
          (else x))))


(define (install-projection-package)
  (define (project-complex x) (make-real (real-part x)))
  (define (project-real x) (make-rational (round x) 1))
  (define (project-rational x) (make-integer (quotient (numer x) (denom x))))

  (put 'project '(complex) project-complex)
  (put 'project '(real) project-real)
  (put 'project '(rational) project-rational)
  (put 'project '(integer) (lambda (x) x))
  'done)

(define (project x) (apply-generic 'project x))


(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (equ? x y) (apply-generic 'equ x y))


(install-integer-package)
(install-rational-package)
(install-real-package)
(install-complex-package)
(install-raise-package)
(install-projection-package)

(add (make-complex-from-real-imag (make-rational 3 2) (make-real 2.4))
     (make-complex-from-real-imag (make-real 1.5) (make-real 2.4)))

(mul (make-complex-from-mag-ang (make-real 1.5) (make-integer 2))
     (make-complex-from-mag-ang (make-integer 10) (make-real 0.5)))

(sub (make-complex-from-real-imag (make-real 1.5) (make-rational 12 5))
     (make-complex-from-real-imag (make-real 1.5) (make-integer 2)))

(div (make-complex-from-mag-ang (make-rational 3 2) (make-real 2.4))
     (make-complex-from-mag-ang (make-real 1.5) (make-integer 2)))