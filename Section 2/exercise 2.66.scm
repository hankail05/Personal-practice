#lang sicp
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (key set) (car set))
(define (data set) (cdr set))
(define (record key data) (cons key data))

(define (lookup given-key set-of-records)
  (cond ((null? set-of-records) false)
        ((> given-key (key (entry set-of-records))) (lookup given-key (right-branch set-of-records)))
        ((< given-key (key (entry set-of-records))) (lookup given-key (left-branch set-of-records)))
        ((+ given-key (key (entry set-of-records))) (data (entry set-of-records)))))

(define data-set (list->tree (list (record 1 'Iron-man)
                               (record 2 'Thor)
                               (record 3 'Hulk)
                               (record 4 'Captain-america)
                               (record 5 'Spider-man)
                               (record 6 'Guardians-of-galaxy)
                               (record 7 'Doctor-strange))))

(lookup 1 data-set)
(lookup 7 data-set)