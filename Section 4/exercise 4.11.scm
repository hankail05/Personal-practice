#lang sicp
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (make-frame variables values)
  (list (cons variables values)))
(define (frame-variable binding) (car binding))
(define (frame-value binding) (cdr binding))
(define (add-binding-to-frame! var val frame)
  (set! frame (cons (cons var val) frame)))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings) (env-loop (enclosing-environment env)))
            ((eq? var (caar bindings)) (caar bindings))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan frame))))
  (env-loop env))
(define (extend-environment variables values base-env)
  (append (make-frame variables values) base-env))
(define (define-variable! variable value env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings) (add-binding-to-frame! variable value frame))
            ((eq? variable (caar bindings)) (set-cdr! (car bindings) value))
            (else (scan (cdr bindings)))))
    (scan frame)))
(define (set-variable-value! variable value env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings) (env-loop (enclosing-environment env)))
            ((eq? variable (caar bindings)) (set-cdr! (car bindings) value))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" variable)
        (let ((frame (first-frame env)))
          (scan frame))))
  (env-loop env))