#lang sicp
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp) (make-procedure (lambda-parameters exp) (lambda-body exp) env))
        ((begin? exp) (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((let? exp) (eval (let->combination exp) env))
        ((application? exp) (apply (eval (operator exp) env) (list-of-values (operands exp) env)))
        (else (error "Unknown expression type -- EVAL" exp))))

(define (let? exp)
  (tagged-list? exp 'let))

(define (let-variables clauses)
  (define (iter bindings)
    (if (null? bindings)
      nil
      (cons (caar bindings)
            (let-variables (cdr bindings)))))
  (iter (car clauses)))
(define (let-expressions clauses)
  (define (iter bindings)
    (if (null? bindings)
      nil
      (cons (cadar bindings)
            (let-variables (cdr bindings)))))
  (iter (car clauses)))
(define (let-body clauses) (cdr clauses))
(define (let->combination exp)
  (let ((clauses (cdr exp)))
    (cons (make-lambda (let-variables clauses)
                       (let-body clauses))
          (let-expressions clauses))))