#lang sicp
(define (permutations s)
  (if (null? s)
      (list nil)
      (flatmap (lambda (x)
                 (map (lambda (p) (cons x p))
                      (permutations (remove x s))))
               s)))
(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))
(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))



(define (multiple-dwelling)
  (define (print-list results)
    (if (not (null? results))
        (begin (let ((result (car results)))
                 (let ((dwelling (list (list 'baker (car result))
                                       (list 'cooper (cadr result))
                                       (list 'fletcher (caddr result))
                                       (list 'miller (cadddr result))
                                       (list 'smith (car (cddddr result))))))
                   (display dwelling)
                   (newline)))
               (print-list (cdr results)))
        (display "")))
  (define (restricts candidates)
    (let ((baker (car candidates))
          (cooper (cadr candidates))
          (fletcher (caddr candidates))
          (miller (cadddr candidates))
          (smith (car (cddddr candidates))))

      (and (not (= baker 5))
           (not (= cooper 1))
           (not (= fletcher 5))
           (not (= fletcher 1))
           (> miller cooper)
           (not (= (abs (- smith fletcher)) 1))
           (not (= (abs (- fletcher cooper)) 1)))))
  (print-list (filter restricts (permutations '(1 2 3 4 5)))))


(multiple-dwelling)