#lang sicp
(define global-array '())
(define (make-entry k v) (list k v))
(define (key entry) (car entry))
(define (value entry) (cadr entry))
(define (put op type item)
  (define (put-helper k array)
    (cond ((null? array) (list (make-entry k item)))
          ((equal? (key (car array)) k) array)
          (else (cons (car array) (put-helper k (cdr array))))))
  (set! global-array (put-helper (list op type) global-array)))
(define (get op type)
  (define (get-helper k array)
    (cond ((null? array) #f)
          ((equal? (key (car array)) k) (value (car array)))
          (else (get-helper k (cdr array)))))
  (get-helper (list op type) global-array))
; get/put


(define (install-eval-package)
  (define (self-ev exp env) exp)
  (define (variable-ev exp env) (look-up-variable-value exp env))
  (define (quoted-ev exp env) (text-of-quotation exp))
  (define (assignment-ev exp env) (eval-assignment exp env))
  (define (definition-ev exp env) (eval-definition exp env))
  (define (if-ev exp env) (eval-if exp env))
  (define (lambda-ev exp env) (eval-if exp env))
  (define (begin-ev exp env) (eval-sequence (begin-actions exp) env))
  (define (cond-ev exp env) (eval (cond->if exp) env))
  (define (application-ev exp env) (apply (eval (operator exp) env) (list-op-values (operands exp) env)))

  (put 'eval 'self self-ev)
  (put 'eval 'variable variable-ev)
  (put 'eval 'quoted quoted-ev)
  (put 'eval 'assignment assignment-ev)
  (put 'eval 'definition definition-ev)
  (put 'eval 'if if-ev)
  (put 'eval 'lambda lambda-ev)
  (put 'eval 'begin begin-ev)
  (put 'eval 'cond 'cond-ev)
  (put 'eval 'application 'application-ev)
  'done)

(define (eval exp env)
  (cond ((self-evaluating? exp) ((get 'eval 'self) exp env))
        ((variable? exp) ((get 'eval 'variable) exp env))
        ((get 'eval (car exp)) ((get 'eval (car exp)) exp env))
        ((application? exp) ((get 'eval 'application) exp env))
        (else (error "Unknown expression type -- EVAL" expr))))