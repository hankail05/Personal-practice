#lang sicp
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp) (make-procedure (lambda-parameters exp) (lambda-body exp) env))
        ((begin? exp) (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((let? exp) (eval (let->combination exp) env))
        ((let*? exp) (eval (let*->nested-lets exp) env)) ; enough.
        ((application? exp) (apply (eval (operator exp) env) (list-of-values (operands exp) env)))
        (else (error "Unknown expression type -- EVAL" exp))))

(define (let*? exp)
  (tagged-list? exp 'let*))

(define (let*-null? clauses) (null? clauses))
(define (let*-expression clauses) (car clauses))
(define (let*-rest-expressions clauses) (cdr clauses))
(define (let*-body exp) (caddr exp))
(define (let*->nested-lets exp)
  (define (iter clauses)
    (if (let*-null? clauses)
        (sequence->exp (let*-body exp))
        (list 'let (list (let*-expression clauses)) (iter (let*-rest-expressions clauses)))))
    (iter (cadr exp)))