#lang sicp
(define (let? exp)
  (tagged-list? exp 'let))

(define (named-let? exp) (and (let? exp) (symbol? (cadr exp))))
(define (named-let-variable clauses) (car clauses))
(define (named-let-parameters clauses)
  (define (iter bindings) 
    (if (null? bindings)
        nil
        (cons (caar bindings)
              (iter (cdr bindings)))))
  (iter (cadr clauses)))
(define (named-let-arguments clauses)
  (define (iter bindings)
    (if (null? bindings)
        nil
        (cons (cadar bindings)
              (iter (cdr bingings)))))
  (iter (cadr clauses)))
(define (named-let-body cluases) (cddr clauses))
(define (named-let->combination exp)
  (let ((clauses (cdr exp)))
    (make-begin (list (list 'define
                            (named-let-variable clauses)
                            (make-lambda (named-let-parameters clauses)
                                         (named-let-body clauses)))
                      (cons (named-let-variable clauses)
                            (named-let-arguments clauses))))))
(define (let->combination exp)
  (let ((clauses (cdr exp)))
    (if (named-let? clauses)
        (named-let->combination exp)
        (cons (make-lambda (let-variables clauses)
                           (let-body clauses))
              (let-expressions clauses)))))