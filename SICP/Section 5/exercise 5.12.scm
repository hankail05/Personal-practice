#lang sicp
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops (list (list 'initialize-stack (lambda () (stack 'initialize)))))
          (register-table (list (list 'pc pc) (list 'flag flag)))
          (dataset-table (list (cons 'assign '())
                               (cons 'branch '())
                               (cons 'goto '())
                               (cons 'perform '())
                               (cons 'restore '())
                               (cons 'save '())
                               (cons 'test '())
                               (cons 'entry-points '())
                               (cons 'save-restore '())
                               (cons 'sources '()))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table (cons (list name (make-register name)) register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin ((instruction-execution-proc (car insts)))
                     (execute)))))
      (define (append-dataset name datum)
        (let ((dataset (lookup-dataset name)))
          (if (not (is-duplicated? name datum))
              (set-cdr! dataset (cons datum (cdr dataset))))))
      (define (print-dataset name)
        (let ((dataset (lookup-dataset name)))
          (display dataset)
          (newline)))
      (define (is-duplicated? name datum)
        (let ((dataset (lookup-dataset name)))
          (cond ((symbol? datum) (memq datum dataset))
                ((list? datum) (member datum dataset))
                (else (error "Invalid datum type -- IS-DUPLICATED?" datum)))))
      (define (lookup-dataset name)
        (let ((val (assoc name dataset-table)))
          (if val
              val
              (error "Unknown dataset:" name))))
      (define (dispatch message)
        (cond ((eq? message 'start) (set-contents! pc the-instruction-sequence)
                                    (execute))
              ((eq? message 'install-instruction-sequence) (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations) (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'append-dataset) append-dataset)
              ((eq? message 'print-dataset) print-dataset)
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))
(define (start machine)
  (machine 'start))
(define (get-register-contents machine register-name)
  (get-contents (get-register machine register-name)))
(define (set-register-contents! machine register-name value)
  (set-contents! (get-register machine register-name) value)
  'done)
(define (get-register machine reg-name)
  ((machine 'get-register) reg-name))
(define (get-dataset machine name)
  ((machine 'print-dataset) name))


(define (make-assign inst machine labels operations pc)
  ((machine 'append-dataset) (car inst) (cdr inst))
  ((machine 'append-dataset) 'sources (cddr inst))
  (let ((target (get-register machine (assign-reg-name inst)))
        (value-exp (assign-value-exp inst)))
    (let ((value-proc (if (operation-exp? value-exp)
                          (make-operation-exp value-exp machine labels operations)
                          (make-primitive-exp (car value-exp) machine labels))))
      (lambda ()
        (set-contents! target (value-proc))
        (advance-pc pc)))))
(define (assign-reg-name assign-instruction) (cadr assign-instruction))
(define (assign-value-exp assign-instruction) (cddr assign-instruction))

(define (advance-pc pc) (set-contents! pc (cdr (get-contents pc))))

(define (make-test inst machine labels operations flag pc)
  ((machine 'append-dataset) (car inst) (cdr inst))
  (let ((condition (test-condition inst)))
    (if (operation-exp? condition)
        (let ((condition-proc (make-operation-exp condition machine labels operations)))
          (lambda ()
            (set-contents! flag (condition-proc))
            (advance-pc pc)))
        (error "Bad TEST instruction -- ASSEMBLE" inst))))
(define (test-condition test-instruction) (cdr test-instruction))

(define (make-branch inst machine labels flag pc)
  ((machine 'append-dataset) (car inst) (cdr inst))
  (let ((dest (branch-dest inst)))
    (if (label-exp? dest)
        (let ((insts (lookup-label labels (label-exp-label dest))))
          (lambda ()
            (if (get-contents flag)
                (set-contents! pc insts)
                (advance-pc pc))))
        (error "Bad BRANCH instruction -- ASSEMBLE" inst))))
(define (branch-dest branch-instruction) (cadr branch-instruction))

(define (make-goto inst machine labels pc)
  ((machine 'append-dataset) (car inst) (cdr inst))
  (if (register-exp? (cadr inst))
      ((machine 'append-dataset) 'entry-points (cadadr inst)))
  (let ((dest (goto-dest inst)))
    (cond ((label-exp? dest) (let ((insts (lookup-label labels (label-exp-label dest))))
                               (lambda () (set-contents! pc insts))))
          ((register-exp? dest) (let ((reg (get-register machine (register-exp-reg dest))))
                                  (lambda ()
                                    (set-contents! pc (get-contents reg)))))
          (else (error "Bad GOTO instruction -- ASSEMBLE" inst)))))
(define (goto-dest goto-instruction) (cadr goto-instruction))

(define (make-save inst machine stack pc)
  ((machine 'append-dataset) (car inst) (cdr inst))
  ((machine 'append-dataset) 'save-restore (cadr inst))
  (let ((reg (get-register machine (stack-inst-reg-name inst))))
    (lambda ()
      (push stack (get-contents reg))
      (advance-pc pc))))
(define (make-restore inst machine stack pc)
  ((machine 'append-dataset) (car inst) (cdr inst))
  ((machine 'append-dataset) 'save-restore (cadr inst))
  (let ((reg (get-register machine (stack-inst-reg-name inst))))
    (lambda ()
      (set-contents! reg (pop stack))
      (advance-pc pc))))
(define (stack-inst-reg-name stack-instruction) (cadr stack-instruction))

(define (make-perform inst machine labels operations pc)
  ((machine 'append-dataset) (car inst) (cdr inst))
  (let ((action (perform-action inst)))
    (if (operation-exp? action)
        (let ((action-proc (make-operation-exp action machine labels operations)))
          (lambda ()
            (action-proc)
            (advance-pc pc)))
        (error "Bad PERFORM instruction -- ASSEMBLE" inst))))
(define (perform-action inst) (cdr inst))