#lang sicp
(define (=number? vari cons) (and (number? vari) (= vari cons)))
(define (variable? x) (symbol? x))
(define (same-variable? x1 x2) (and (variable? x1) (variable? x2) (eq? x1 x2)))
(define (operation exp)
  (if (memq '+ exp) '+ '*))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (iter exp result op)
  (if (eq? (car exp) op)
      result
      (iter (cdr exp) (append result (list (car exp))) op)))
(define (sum? x) (eq? (operation x) '+))
(define (addend s)
  (let ((result (iter s nil '+)))
    (if (and (not (null? result)) (null? (cdr result)))
        (car result)
        result)))
(define (augend s)
  (let ((result (memq '+ s)))
    (if (null? (cddr result)) (cadr result) (cdr result))))
(define (product? x) (eq? (operation x) '*))
(define (multiplier p)
  (let ((result (iter p nil '*)))
    (if (and (not (null? result)) (null? (cdr result)))
        (car result)
        result)))
(define (multiplicand p)
  (let ((result (memq '* p)))
  (if (null? (cddr result)) (cadr result) (cdr result))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else
         (error "unknown expression type -- DERIV" exp))))

(deriv '(x * x + x) 'x)