Q.

One difficulty with the linked representation of lists is the space required;
unless the Info field of each record is large compared with the size of a pointer, each list will have a great deal of memory overhead for pointers compared to the amount of "real" data.
Cdr-coding is one way of overcoming this problem. The idea is to have two different types of list records, say LargeNode and SmallNode.
Each has an Info field as usual plus a one-bit field Ntype that distinguishes one type from the other.
(It is quite often possible to "steal" anotherwise unused bit from a storage location, especially if the location is known to contain a pointer.)
Each LargeNode contains 1 in its Ntype field and contains a Next field as usual. Each SmallNode contains 0 in its Ntype field and has no Next field at all. Instead, the next record in the list follows immediately in memory, as though in a table;
that is, each SmallNode has an implicit Next pointer that points just beyond itself in memory.
Figure 3.7(c) shows an example of a cdr-coded list.

a. Write the routine Access(L,i) that finds the i_th element of a cdrcoded list L. Assume that N + smallnodesize gives the address of the record immediately succeeding record N in memory when N is a SmallNode.

b. Write a routine CopyList that makes a copy of a cdr-coded list, ensuring that the new list is represented as compactly as possible.
Assume that consecutive calls on NewCell are guaranteed to return nodes that are adjacent in memory.

A.

a.

function Acceess(pointer L, integer i): key
{Find an element in the cdr-coded list. Return -1 if the index is invalid.}
    curr <- L
    for x from 0 to i-1 do
        if curr = nullptr then
	    return -1
	else if Ntype(curr) = 1 then
	    curr <- Next(curr)
	else
	    curr <- curr + smallNodesize
    return Info(curr)

b.

function CopyList(pointer L): pointer
{Make a copy of a cdr-coded list}
    p <- nullptr
    curr <- L
    prev <- nullptr
    while p != nullptr do 
        if Ntype(p) = 1 then
	    tmp <- NewCell(LargeNode)
	    Ntype(tmp) <- 1
	    Next(tmp) <- nullptr
	else
	    tmp <- NewCell(SmallNode)
	    Ntype(tmp) <- 0
	Info(tmp) <- Info(curr)
	Ntype(tmp) <- Ntype(curr)
	if prev = nullptr then
	    p <- tmp
	else if Ntype(prev) = 1 then
	    Next(prev) <- tmp
        prev <- p
	if Ntype(curr) = 1
	    curr <- Next(curr)
	else
	    curr <- curr + smallNodesize
