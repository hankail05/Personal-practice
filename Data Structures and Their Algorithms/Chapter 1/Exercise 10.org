#=

Q.

This problem concerns the notation for simultaneous assignment, for example $( X Y ) \leftarrow ( Z W )$.

a. We abbreviated the special case $( X Y ) \leftarrow ( Y X )$ by $X \leftrightarrow Y$.
Write code for this swap using only simple assignment statements and a temporary variable $T$.

b. Generalizing part (a), suppose we want to rotate the values of $n$ variables $X_1, ..., X_n$ as follows:
\begin{pmatrix}
 X_1 \\
 X_2 \\
 \vdots \\
 X_{n-1} \\
 X_n
\end{pmatrix} \leftarrow
\begin{pmatrix}
 X_2 \\
 X_3 \\
 \vdots \\
 X_n \\
 X_1
\end{pmatrix}
Write code for this operation using only simple assignments and as few temporary variables as possible.

c. Suppose we need to translate the notation
\begin{pmatrix}
 X_1 \\
 \vdots \\
 X_n
\end{pmatrix} \leftarrow
\begin{pmatrix}
 a_1 \\
 \vdots \\
 a_n
\end{pmatrix}
into some programming language that does not provide these simultaneous
assignments. Translate the general simultaneous assignment
into code that uses only simple assignments, again using as few
temporary variables as possible. (The $a_i$ are arbitrary expressions.)

d. Now suppose that we are working in a language where
simultaneous assignments are not available, but there is a primitive swap
operation $X \leftrightarrow Y$ that exchanges the values of $X$ and $Y$. Solve
parts (b) and (c) again.

A.

a.

procedure Swap(key X, key Y):
    T <- X
    X <- Y
    Y <- T

b.

procedure RotateOne(table X[1...n]):
    T <- X[1]
    for i from 1 to n-1 do
	X[i] <- X[i+1]
    x[n] <- T

c.

procedure SimultaneousAssignments(table X[1...n], table Y[1...n])
    T <- Y
    for i from 1 to n do
        X[i] <- T[i]

d.

procedure RotateOne(table X[1...n]):
    for i from i to n-1 do
        Swap(X[i], X[(i+1)%n])

procedure SimultaneousAssignments(table X[1...n], table Y[1...n])
    for i from 1 to n do
        Swap(X[i], Y[i])

=#
