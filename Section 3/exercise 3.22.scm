#lang sicp
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-queue?) (null? front-ptr))
    (define (print-queue) front-ptr)
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" (print-queue))
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?) (set-front-ptr! new-pair) (set-rear-ptr!  new-pair) (print-queue))
              (else (set-cdr! rear-ptr new-pair) (set-rear-ptr! new-pair) (print-queue)))))
    (define (delete-queue!)
      (cond ((empty-queue?) (error "DELETE! called with an empty queue" (print-queue)))
            (else (set-front-ptr! (cdr front-ptr)) (print-queue))))
    (define (dispatch m)
      (cond ((eq? m 'front-queue) (front-queue))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            (else (error "Undefined operator" m))))
    dispatch))


(define q1 (make-queue))
((q1 'insert-queue!) 'a)
((q1 'insert-queue!) 'b)
(q1 'front-queue)
(q1 'delete-queue!)
(q1 'delete-queue!)