                            | #######################################################################
                            | # Test for copying block of size 256;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a015000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20001000000000000 | 	irmovq $256, %rdx		# src and dst have 256 elements
0x014: 30f6180d000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70805000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 809e03000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: c0f2f8ffffffffffffff |         iaddq $-8,%rdx          # For loop unrolling
0x047: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x049: 72c301000000000000   | 	jl Unroll7     		# if so, goto Unroll:
                            | 
0x052: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x05c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x066: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x068: 717b00000000000000   | 	jle Npos		# if so, goto Npos:
0x071: c0f00100000000000000 | 	iaddq $1, %rax  	# count++
0x07b: 50a70800000000000000 | Npos:   mrmovq 8(%rdi), %r10
0x085: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x08f: 62aa                 |         andq %r10, %r10
0x091: 71a400000000000000   |         jle Npos2
0x09a: c0f00100000000000000 |         iaddq $1, %rax
0x0a4: 50a71000000000000000 | Npos2:  mrmovq 16(%rdi), %r10
0x0ae: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)
0x0b8: 62aa                 |         andq %r10, %r10
0x0ba: 71cd00000000000000   |         jle Npos3
0x0c3: c0f00100000000000000 |         iaddq $1, %rax
0x0cd: 50a71800000000000000 | Npos3:  mrmovq 24(%rdi), %r10
0x0d7: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x0e1: 62aa                 |         andq %r10, %r10
0x0e3: 71f600000000000000   |         jle Npos4
0x0ec: c0f00100000000000000 |         iaddq $1, %rax
0x0f6: 50a72000000000000000 | Npos4:  mrmovq 32(%rdi), %r10
0x100: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x10a: 62aa                 |         andq %r10, %r10
0x10c: 711f01000000000000   |         jle Npos5
0x115: c0f00100000000000000 |         iaddq $1, %rax
0x11f: 50a72800000000000000 | Npos5:  mrmovq 40(%rdi), %r10
0x129: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x133: 62aa                 |         andq %r10, %r10
0x135: 714801000000000000   |         jle Npos6
0x13e: c0f00100000000000000 |         iaddq $1, %rax
0x148: 50a73000000000000000 | Npos6:  mrmovq 48(%rdi), %r10
0x152: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x15c: 62aa                 |         andq %r10, %r10
0x15e: 717101000000000000   |         jle Npos7
0x167: c0f00100000000000000 |         iaddq $1, %rax
0x171: 50a73800000000000000 | Npos7:  mrmovq 56(%rdi), %r10
0x17b: 40a63800000000000000 |         rmmovq %r10, 56(%rsi)
0x185: 62aa                 |         andq %r10, %r10
0x187: 719a01000000000000   |         jle Npos8
0x190: c0f00100000000000000 |         iaddq $1, %rax
0x19a: c0f2f8ffffffffffffff | Npos8:  iaddq $-8, %rdx         # len -= 8
0x1a4: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x1ae: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1b8: 6222                 | 	andq %rdx,%rdx		# len >= 0?
0x1ba: 755200000000000000   | 	jge Loop		# if so, goto Loop:
0x1c3: c0f20100000000000000 | Unroll7:iaddq $1, %rdx          # Is seven elements left?
0x1cd: 740802000000000000   |         jne Unroll6             # if not so, goto Unroll6:
0x1d6: 50a73000000000000000 | Seven:  mrmovq 48(%rdi), %r10
0x1e0: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x1ea: 62aa                 |         andq %r10, %r10
0x1ec: 711b02000000000000   |         jle Six
0x1f5: c0f00100000000000000 |         iaddq $1, %rax
0x1ff: 701b02000000000000   |         jmp Six
0x208: c0f20100000000000000 | Unroll6:iaddq $1, %rdx          # Is six elements left?
0x212: 744d02000000000000   |         jne Unroll5             # if not so, goto Unroll5:
0x21b: 50a72800000000000000 | Six:  mrmovq 40(%rdi), %r10
0x225: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x22f: 62aa                 |         andq %r10, %r10
0x231: 716002000000000000   |         jle Five
0x23a: c0f00100000000000000 |         iaddq $1, %rax
0x244: 706002000000000000   |         jmp Five
0x24d: c0f20100000000000000 | Unroll5:iaddq $1, %rdx          # Is five elements left?
0x257: 749202000000000000   |         jne Unroll4             # if not so, goto Unroll4:
0x260: 50a72000000000000000 | Five:   mrmovq 32(%rdi), %r10
0x26a: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x274: 62aa                 |         andq %r10, %r10
0x276: 71a502000000000000   |         jle Four
0x27f: c0f00100000000000000 |         iaddq $1, %rax
0x289: 70a502000000000000   |         jmp Four
0x292: c0f20100000000000000 | Unroll4:iaddq $1, %rdx          # Is four elements left?
0x29c: 74d702000000000000   |         jne Unroll3             # if not so, goto Unroll2:
0x2a5: 50a71800000000000000 | Four:   mrmovq 24(%rdi), %r10
0x2af: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x2b9: 62aa                 |         andq %r10, %r10
0x2bb: 71ea02000000000000   |         jle Three
0x2c4: c0f00100000000000000 |         iaddq $1, %rax
0x2ce: 70ea02000000000000   |         jmp Three
0x2d7: c0f20100000000000000 | Unroll3:iaddq $1, %rdx          # Is three elements left?
0x2e1: 741c03000000000000   |         jne Unroll2             # if not so, goto Unroll2:
0x2ea: 50a71000000000000000 | Three:  mrmovq 16(%rdi), %r10
0x2f4: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)
0x2fe: 62aa                 |         andq %r10, %r10
0x300: 712f03000000000000   |         jle Two
0x309: c0f00100000000000000 |         iaddq $1, %rax
0x313: 702f03000000000000   |         jmp Two
0x31c: c0f20100000000000000 | Unroll2:iaddq $1, %rdx         # Is two elements left?
0x326: 746103000000000000   |         jne Unroll1            # if not so, goto Unroll1:
0x32f: 50a70800000000000000 | Two:    mrmovq 8(%rdi), %r10
0x339: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x343: 62aa                 |         andq %r10, %r10
0x345: 717403000000000000   |         jle One
0x34e: c0f00100000000000000 |         iaddq $1, %rax
0x358: 707403000000000000   |         jmp One
0x361: c0f20100000000000000 | Unroll1:iaddq $1, %rdx         # Is one element left?
0x36b: 749d03000000000000   |         jne Done               # if not so, goto Done:
0x374: 50a70000000000000000 | One:    mrmovq (%rdi), %r10
0x37e: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x388: 62aa                 |         andq %r10, %r10
0x38a: 719d03000000000000   |         jle Done
0x393: c0f00100000000000000 |         iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x39d:                      | Done:
0x39d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x39e:                      | End:
                            | #/* $end ncopy-ys */
0x39e:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 143.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x39e:                      | check:
                            | 	# Return value test
0x39e: 30fa8f00000000000000 | 	irmovq $143,%r10
0x3a8: 61a0                 | 	subq %r10,%rax
0x3aa: 73c603000000000000   | 	je checkb
0x3b3: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x3bd: 700405000000000000   | 	jmp cdone
0x3c6:                      | checkb:
                            | 	# Code length check
0x3c6: 30f09e03000000000000 | 	irmovq EndFun,%rax
0x3d0: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3da: 6120                 | 	subq %rdx,%rax
0x3dc: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3e6: 6102                 | 	subq %rax,%rdx
0x3e8: 750404000000000000   | 	jge checkm
0x3f1: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3fb: 700405000000000000   | 	jmp cdone
0x404:                      | checkm:
0x404: 30f2180d000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x40e: 30f30805000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x418: 30f70001000000000000 | 	irmovq $256,%rdi  # Count
0x422: 6277                 | 	andq %rdi,%rdi
0x424: 738204000000000000   | 	je checkpre         # Skip check if count = 0
0x42d:                      | mcloop:
0x42d: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x437: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x441: 6160                 | 	subq %rsi,%rax
0x443: 735f04000000000000   | 	je  mok
0x44c: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x456: 700405000000000000   | 	jmp cdone
0x45f:                      | mok:
0x45f: 30f00800000000000000 | 	irmovq $8,%rax
0x469: 6002                 | 	addq %rax,%rdx	  # dest ++
0x46b: 6003                 | 	addq %rax,%rbx    # src++
0x46d: 30f00100000000000000 | 	irmovq $1,%rax
0x477: 6107                 | 	subq %rax,%rdi    # cnt--
0x479: 762d04000000000000   | 	jg mcloop
0x482:                      | checkpre:
                            | 	# Check for corruption
0x482: 30f2100d000000000000 | 	irmovq Predest,%rdx
0x48c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x496: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x4a0: 6120                 | 	subq %rdx,%rax
0x4a2: 73be04000000000000   | 	je checkpost
0x4ab: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x4b5: 700405000000000000   | 	jmp cdone
0x4be:                      | checkpost:
                            | 	# Check for corruption
0x4be: 30f21815000000000000 | 	irmovq Postdest,%rdx
0x4c8: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x4d2: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4dc: 6120                 | 	subq %rdx,%rax
0x4de: 73fa04000000000000   | 	je checkok
0x4e7: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4f1: 700405000000000000   | 	jmp cdone
0x4fa:                      | checkok:
                            | 	# Successful checks
0x4fa: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x504:                      | cdone:
0x504: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x508:                      | 	.align 8
0x508:                      | src:
0x508: ffffffffffffffff     | 	.quad -1
0x510: feffffffffffffff     | 	.quad -2
0x518: fdffffffffffffff     | 	.quad -3
0x520: fcffffffffffffff     | 	.quad -4
0x528: fbffffffffffffff     | 	.quad -5
0x530: faffffffffffffff     | 	.quad -6
0x538: f9ffffffffffffff     | 	.quad -7
0x540: 0800000000000000     | 	.quad 8
0x548: 0900000000000000     | 	.quad 9
0x550: 0a00000000000000     | 	.quad 10
0x558: 0b00000000000000     | 	.quad 11
0x560: f4ffffffffffffff     | 	.quad -12
0x568: f3ffffffffffffff     | 	.quad -13
0x570: f2ffffffffffffff     | 	.quad -14
0x578: 0f00000000000000     | 	.quad 15
0x580: 1000000000000000     | 	.quad 16
0x588: 1100000000000000     | 	.quad 17
0x590: 1200000000000000     | 	.quad 18
0x598: edffffffffffffff     | 	.quad -19
0x5a0: ecffffffffffffff     | 	.quad -20
0x5a8: ebffffffffffffff     | 	.quad -21
0x5b0: 1600000000000000     | 	.quad 22
0x5b8: e9ffffffffffffff     | 	.quad -23
0x5c0: 1800000000000000     | 	.quad 24
0x5c8: 1900000000000000     | 	.quad 25
0x5d0: 1a00000000000000     | 	.quad 26
0x5d8: e5ffffffffffffff     | 	.quad -27
0x5e0: 1c00000000000000     | 	.quad 28
0x5e8: 1d00000000000000     | 	.quad 29
0x5f0: 1e00000000000000     | 	.quad 30
0x5f8: e1ffffffffffffff     | 	.quad -31
0x600: e0ffffffffffffff     | 	.quad -32
0x608: 2100000000000000     | 	.quad 33
0x610: deffffffffffffff     | 	.quad -34
0x618: 2300000000000000     | 	.quad 35
0x620: 2400000000000000     | 	.quad 36
0x628: dbffffffffffffff     | 	.quad -37
0x630: daffffffffffffff     | 	.quad -38
0x638: 2700000000000000     | 	.quad 39
0x640: d8ffffffffffffff     | 	.quad -40
0x648: 2900000000000000     | 	.quad 41
0x650: d6ffffffffffffff     | 	.quad -42
0x658: 2b00000000000000     | 	.quad 43
0x660: 2c00000000000000     | 	.quad 44
0x668: d3ffffffffffffff     | 	.quad -45
0x670: 2e00000000000000     | 	.quad 46
0x678: d1ffffffffffffff     | 	.quad -47
0x680: 3000000000000000     | 	.quad 48
0x688: 3100000000000000     | 	.quad 49
0x690: ceffffffffffffff     | 	.quad -50
0x698: 3300000000000000     | 	.quad 51
0x6a0: 3400000000000000     | 	.quad 52
0x6a8: 3500000000000000     | 	.quad 53
0x6b0: 3600000000000000     | 	.quad 54
0x6b8: 3700000000000000     | 	.quad 55
0x6c0: c8ffffffffffffff     | 	.quad -56
0x6c8: 3900000000000000     | 	.quad 57
0x6d0: c6ffffffffffffff     | 	.quad -58
0x6d8: 3b00000000000000     | 	.quad 59
0x6e0: c4ffffffffffffff     | 	.quad -60
0x6e8: c3ffffffffffffff     | 	.quad -61
0x6f0: 3e00000000000000     | 	.quad 62
0x6f8: c1ffffffffffffff     | 	.quad -63
0x700: 4000000000000000     | 	.quad 64
0x708: 4100000000000000     | 	.quad 65
0x710: 4200000000000000     | 	.quad 66
0x718: bdffffffffffffff     | 	.quad -67
0x720: 4400000000000000     | 	.quad 68
0x728: 4500000000000000     | 	.quad 69
0x730: baffffffffffffff     | 	.quad -70
0x738: 4700000000000000     | 	.quad 71
0x740: 4800000000000000     | 	.quad 72
0x748: b7ffffffffffffff     | 	.quad -73
0x750: 4a00000000000000     | 	.quad 74
0x758: 4b00000000000000     | 	.quad 75
0x760: b4ffffffffffffff     | 	.quad -76
0x768: b3ffffffffffffff     | 	.quad -77
0x770: 4e00000000000000     | 	.quad 78
0x778: 4f00000000000000     | 	.quad 79
0x780: b0ffffffffffffff     | 	.quad -80
0x788: 5100000000000000     | 	.quad 81
0x790: aeffffffffffffff     | 	.quad -82
0x798: adffffffffffffff     | 	.quad -83
0x7a0: 5400000000000000     | 	.quad 84
0x7a8: abffffffffffffff     | 	.quad -85
0x7b0: 5600000000000000     | 	.quad 86
0x7b8: a9ffffffffffffff     | 	.quad -87
0x7c0: 5800000000000000     | 	.quad 88
0x7c8: a7ffffffffffffff     | 	.quad -89
0x7d0: 5a00000000000000     | 	.quad 90
0x7d8: a5ffffffffffffff     | 	.quad -91
0x7e0: 5c00000000000000     | 	.quad 92
0x7e8: a3ffffffffffffff     | 	.quad -93
0x7f0: 5e00000000000000     | 	.quad 94
0x7f8: a1ffffffffffffff     | 	.quad -95
0x800: a0ffffffffffffff     | 	.quad -96
0x808: 9fffffffffffffff     | 	.quad -97
0x810: 9effffffffffffff     | 	.quad -98
0x818: 6300000000000000     | 	.quad 99
0x820: 6400000000000000     | 	.quad 100
0x828: 6500000000000000     | 	.quad 101
0x830: 9affffffffffffff     | 	.quad -102
0x838: 6700000000000000     | 	.quad 103
0x840: 6800000000000000     | 	.quad 104
0x848: 6900000000000000     | 	.quad 105
0x850: 96ffffffffffffff     | 	.quad -106
0x858: 6b00000000000000     | 	.quad 107
0x860: 6c00000000000000     | 	.quad 108
0x868: 6d00000000000000     | 	.quad 109
0x870: 6e00000000000000     | 	.quad 110
0x878: 91ffffffffffffff     | 	.quad -111
0x880: 90ffffffffffffff     | 	.quad -112
0x888: 7100000000000000     | 	.quad 113
0x890: 7200000000000000     | 	.quad 114
0x898: 7300000000000000     | 	.quad 115
0x8a0: 8cffffffffffffff     | 	.quad -116
0x8a8: 8bffffffffffffff     | 	.quad -117
0x8b0: 8affffffffffffff     | 	.quad -118
0x8b8: 89ffffffffffffff     | 	.quad -119
0x8c0: 7800000000000000     | 	.quad 120
0x8c8: 7900000000000000     | 	.quad 121
0x8d0: 86ffffffffffffff     | 	.quad -122
0x8d8: 7b00000000000000     | 	.quad 123
0x8e0: 84ffffffffffffff     | 	.quad -124
0x8e8: 7d00000000000000     | 	.quad 125
0x8f0: 7e00000000000000     | 	.quad 126
0x8f8: 81ffffffffffffff     | 	.quad -127
0x900: 8000000000000000     | 	.quad 128
0x908: 8100000000000000     | 	.quad 129
0x910: 8200000000000000     | 	.quad 130
0x918: 8300000000000000     | 	.quad 131
0x920: 7cffffffffffffff     | 	.quad -132
0x928: 7bffffffffffffff     | 	.quad -133
0x930: 8600000000000000     | 	.quad 134
0x938: 8700000000000000     | 	.quad 135
0x940: 78ffffffffffffff     | 	.quad -136
0x948: 8900000000000000     | 	.quad 137
0x950: 8a00000000000000     | 	.quad 138
0x958: 8b00000000000000     | 	.quad 139
0x960: 8c00000000000000     | 	.quad 140
0x968: 8d00000000000000     | 	.quad 141
0x970: 8e00000000000000     | 	.quad 142
0x978: 71ffffffffffffff     | 	.quad -143
0x980: 70ffffffffffffff     | 	.quad -144
0x988: 9100000000000000     | 	.quad 145
0x990: 9200000000000000     | 	.quad 146
0x998: 6dffffffffffffff     | 	.quad -147
0x9a0: 9400000000000000     | 	.quad 148
0x9a8: 6bffffffffffffff     | 	.quad -149
0x9b0: 9600000000000000     | 	.quad 150
0x9b8: 69ffffffffffffff     | 	.quad -151
0x9c0: 9800000000000000     | 	.quad 152
0x9c8: 67ffffffffffffff     | 	.quad -153
0x9d0: 9a00000000000000     | 	.quad 154
0x9d8: 9b00000000000000     | 	.quad 155
0x9e0: 64ffffffffffffff     | 	.quad -156
0x9e8: 9d00000000000000     | 	.quad 157
0x9f0: 62ffffffffffffff     | 	.quad -158
0x9f8: 9f00000000000000     | 	.quad 159
0xa00: a000000000000000     | 	.quad 160
0xa08: 5fffffffffffffff     | 	.quad -161
0xa10: 5effffffffffffff     | 	.quad -162
0xa18: a300000000000000     | 	.quad 163
0xa20: a400000000000000     | 	.quad 164
0xa28: 5bffffffffffffff     | 	.quad -165
0xa30: 5affffffffffffff     | 	.quad -166
0xa38: a700000000000000     | 	.quad 167
0xa40: 58ffffffffffffff     | 	.quad -168
0xa48: a900000000000000     | 	.quad 169
0xa50: aa00000000000000     | 	.quad 170
0xa58: ab00000000000000     | 	.quad 171
0xa60: ac00000000000000     | 	.quad 172
0xa68: ad00000000000000     | 	.quad 173
0xa70: 52ffffffffffffff     | 	.quad -174
0xa78: af00000000000000     | 	.quad 175
0xa80: b000000000000000     | 	.quad 176
0xa88: 4fffffffffffffff     | 	.quad -177
0xa90: 4effffffffffffff     | 	.quad -178
0xa98: 4dffffffffffffff     | 	.quad -179
0xaa0: b400000000000000     | 	.quad 180
0xaa8: b500000000000000     | 	.quad 181
0xab0: b600000000000000     | 	.quad 182
0xab8: b700000000000000     | 	.quad 183
0xac0: b800000000000000     | 	.quad 184
0xac8: b900000000000000     | 	.quad 185
0xad0: 46ffffffffffffff     | 	.quad -186
0xad8: 45ffffffffffffff     | 	.quad -187
0xae0: bc00000000000000     | 	.quad 188
0xae8: 43ffffffffffffff     | 	.quad -189
0xaf0: be00000000000000     | 	.quad 190
0xaf8: bf00000000000000     | 	.quad 191
0xb00: 40ffffffffffffff     | 	.quad -192
0xb08: 3fffffffffffffff     | 	.quad -193
0xb10: 3effffffffffffff     | 	.quad -194
0xb18: c300000000000000     | 	.quad 195
0xb20: c400000000000000     | 	.quad 196
0xb28: c500000000000000     | 	.quad 197
0xb30: c600000000000000     | 	.quad 198
0xb38: c700000000000000     | 	.quad 199
0xb40: 38ffffffffffffff     | 	.quad -200
0xb48: 37ffffffffffffff     | 	.quad -201
0xb50: ca00000000000000     | 	.quad 202
0xb58: 35ffffffffffffff     | 	.quad -203
0xb60: 34ffffffffffffff     | 	.quad -204
0xb68: 33ffffffffffffff     | 	.quad -205
0xb70: 32ffffffffffffff     | 	.quad -206
0xb78: 31ffffffffffffff     | 	.quad -207
0xb80: d000000000000000     | 	.quad 208
0xb88: d100000000000000     | 	.quad 209
0xb90: 2effffffffffffff     | 	.quad -210
0xb98: d300000000000000     | 	.quad 211
0xba0: d400000000000000     | 	.quad 212
0xba8: d500000000000000     | 	.quad 213
0xbb0: 2affffffffffffff     | 	.quad -214
0xbb8: d700000000000000     | 	.quad 215
0xbc0: d800000000000000     | 	.quad 216
0xbc8: 27ffffffffffffff     | 	.quad -217
0xbd0: da00000000000000     | 	.quad 218
0xbd8: db00000000000000     | 	.quad 219
0xbe0: 24ffffffffffffff     | 	.quad -220
0xbe8: 23ffffffffffffff     | 	.quad -221
0xbf0: 22ffffffffffffff     | 	.quad -222
0xbf8: 21ffffffffffffff     | 	.quad -223
0xc00: 20ffffffffffffff     | 	.quad -224
0xc08: 1fffffffffffffff     | 	.quad -225
0xc10: 1effffffffffffff     | 	.quad -226
0xc18: e300000000000000     | 	.quad 227
0xc20: e400000000000000     | 	.quad 228
0xc28: 1bffffffffffffff     | 	.quad -229
0xc30: 1affffffffffffff     | 	.quad -230
0xc38: e700000000000000     | 	.quad 231
0xc40: e800000000000000     | 	.quad 232
0xc48: 17ffffffffffffff     | 	.quad -233
0xc50: 16ffffffffffffff     | 	.quad -234
0xc58: eb00000000000000     | 	.quad 235
0xc60: 14ffffffffffffff     | 	.quad -236
0xc68: ed00000000000000     | 	.quad 237
0xc70: ee00000000000000     | 	.quad 238
0xc78: 11ffffffffffffff     | 	.quad -239
0xc80: f000000000000000     | 	.quad 240
0xc88: 0fffffffffffffff     | 	.quad -241
0xc90: f200000000000000     | 	.quad 242
0xc98: f300000000000000     | 	.quad 243
0xca0: f400000000000000     | 	.quad 244
0xca8: 0bffffffffffffff     | 	.quad -245
0xcb0: f600000000000000     | 	.quad 246
0xcb8: f700000000000000     | 	.quad 247
0xcc0: f800000000000000     | 	.quad 248
0xcc8: f900000000000000     | 	.quad 249
0xcd0: fa00000000000000     | 	.quad 250
0xcd8: 05ffffffffffffff     | 	.quad -251
0xce0: 04ffffffffffffff     | 	.quad -252
0xce8: 03ffffffffffffff     | 	.quad -253
0xcf0: fe00000000000000     | 	.quad 254
0xcf8: 01ffffffffffffff     | 	.quad -255
0xd00: 0001000000000000     | 	.quad 256
0xd08: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0xd10:                      | 	.align 16
0xd10:                      | Predest:
0xd10: fadebc0000000000     | 	.quad 0xbcdefa
0xd18:                      | dest:
0xd18: abefcd0000000000     | 	.quad 0xcdefab
0xd20: abefcd0000000000     | 	.quad 0xcdefab
0xd28: abefcd0000000000     | 	.quad 0xcdefab
0xd30: abefcd0000000000     | 	.quad 0xcdefab
0xd38: abefcd0000000000     | 	.quad 0xcdefab
0xd40: abefcd0000000000     | 	.quad 0xcdefab
0xd48: abefcd0000000000     | 	.quad 0xcdefab
0xd50: abefcd0000000000     | 	.quad 0xcdefab
0xd58: abefcd0000000000     | 	.quad 0xcdefab
0xd60: abefcd0000000000     | 	.quad 0xcdefab
0xd68: abefcd0000000000     | 	.quad 0xcdefab
0xd70: abefcd0000000000     | 	.quad 0xcdefab
0xd78: abefcd0000000000     | 	.quad 0xcdefab
0xd80: abefcd0000000000     | 	.quad 0xcdefab
0xd88: abefcd0000000000     | 	.quad 0xcdefab
0xd90: abefcd0000000000     | 	.quad 0xcdefab
0xd98: abefcd0000000000     | 	.quad 0xcdefab
0xda0: abefcd0000000000     | 	.quad 0xcdefab
0xda8: abefcd0000000000     | 	.quad 0xcdefab
0xdb0: abefcd0000000000     | 	.quad 0xcdefab
0xdb8: abefcd0000000000     | 	.quad 0xcdefab
0xdc0: abefcd0000000000     | 	.quad 0xcdefab
0xdc8: abefcd0000000000     | 	.quad 0xcdefab
0xdd0: abefcd0000000000     | 	.quad 0xcdefab
0xdd8: abefcd0000000000     | 	.quad 0xcdefab
0xde0: abefcd0000000000     | 	.quad 0xcdefab
0xde8: abefcd0000000000     | 	.quad 0xcdefab
0xdf0: abefcd0000000000     | 	.quad 0xcdefab
0xdf8: abefcd0000000000     | 	.quad 0xcdefab
0xe00: abefcd0000000000     | 	.quad 0xcdefab
0xe08: abefcd0000000000     | 	.quad 0xcdefab
0xe10: abefcd0000000000     | 	.quad 0xcdefab
0xe18: abefcd0000000000     | 	.quad 0xcdefab
0xe20: abefcd0000000000     | 	.quad 0xcdefab
0xe28: abefcd0000000000     | 	.quad 0xcdefab
0xe30: abefcd0000000000     | 	.quad 0xcdefab
0xe38: abefcd0000000000     | 	.quad 0xcdefab
0xe40: abefcd0000000000     | 	.quad 0xcdefab
0xe48: abefcd0000000000     | 	.quad 0xcdefab
0xe50: abefcd0000000000     | 	.quad 0xcdefab
0xe58: abefcd0000000000     | 	.quad 0xcdefab
0xe60: abefcd0000000000     | 	.quad 0xcdefab
0xe68: abefcd0000000000     | 	.quad 0xcdefab
0xe70: abefcd0000000000     | 	.quad 0xcdefab
0xe78: abefcd0000000000     | 	.quad 0xcdefab
0xe80: abefcd0000000000     | 	.quad 0xcdefab
0xe88: abefcd0000000000     | 	.quad 0xcdefab
0xe90: abefcd0000000000     | 	.quad 0xcdefab
0xe98: abefcd0000000000     | 	.quad 0xcdefab
0xea0: abefcd0000000000     | 	.quad 0xcdefab
0xea8: abefcd0000000000     | 	.quad 0xcdefab
0xeb0: abefcd0000000000     | 	.quad 0xcdefab
0xeb8: abefcd0000000000     | 	.quad 0xcdefab
0xec0: abefcd0000000000     | 	.quad 0xcdefab
0xec8: abefcd0000000000     | 	.quad 0xcdefab
0xed0: abefcd0000000000     | 	.quad 0xcdefab
0xed8: abefcd0000000000     | 	.quad 0xcdefab
0xee0: abefcd0000000000     | 	.quad 0xcdefab
0xee8: abefcd0000000000     | 	.quad 0xcdefab
0xef0: abefcd0000000000     | 	.quad 0xcdefab
0xef8: abefcd0000000000     | 	.quad 0xcdefab
0xf00: abefcd0000000000     | 	.quad 0xcdefab
0xf08: abefcd0000000000     | 	.quad 0xcdefab
0xf10: abefcd0000000000     | 	.quad 0xcdefab
0xf18: abefcd0000000000     | 	.quad 0xcdefab
0xf20: abefcd0000000000     | 	.quad 0xcdefab
0xf28: abefcd0000000000     | 	.quad 0xcdefab
0xf30: abefcd0000000000     | 	.quad 0xcdefab
0xf38: abefcd0000000000     | 	.quad 0xcdefab
0xf40: abefcd0000000000     | 	.quad 0xcdefab
0xf48: abefcd0000000000     | 	.quad 0xcdefab
0xf50: abefcd0000000000     | 	.quad 0xcdefab
0xf58: abefcd0000000000     | 	.quad 0xcdefab
0xf60: abefcd0000000000     | 	.quad 0xcdefab
0xf68: abefcd0000000000     | 	.quad 0xcdefab
0xf70: abefcd0000000000     | 	.quad 0xcdefab
0xf78: abefcd0000000000     | 	.quad 0xcdefab
0xf80: abefcd0000000000     | 	.quad 0xcdefab
0xf88: abefcd0000000000     | 	.quad 0xcdefab
0xf90: abefcd0000000000     | 	.quad 0xcdefab
0xf98: abefcd0000000000     | 	.quad 0xcdefab
0xfa0: abefcd0000000000     | 	.quad 0xcdefab
0xfa8: abefcd0000000000     | 	.quad 0xcdefab
0xfb0: abefcd0000000000     | 	.quad 0xcdefab
0xfb8: abefcd0000000000     | 	.quad 0xcdefab
0xfc0: abefcd0000000000     | 	.quad 0xcdefab
0xfc8: abefcd0000000000     | 	.quad 0xcdefab
0xfd0: abefcd0000000000     | 	.quad 0xcdefab
0xfd8: abefcd0000000000     | 	.quad 0xcdefab
0xfe0: abefcd0000000000     | 	.quad 0xcdefab
0xfe8: abefcd0000000000     | 	.quad 0xcdefab
0xff0: abefcd0000000000     | 	.quad 0xcdefab
0xff8: abefcd0000000000     | 	.quad 0xcdefab
0x1000:abefcd0000000000      | 	.quad 0xcdefab
0x1008:abefcd0000000000      | 	.quad 0xcdefab
0x1010:abefcd0000000000      | 	.quad 0xcdefab
0x1018:abefcd0000000000      | 	.quad 0xcdefab
0x1020:abefcd0000000000      | 	.quad 0xcdefab
0x1028:abefcd0000000000      | 	.quad 0xcdefab
0x1030:abefcd0000000000      | 	.quad 0xcdefab
0x1038:abefcd0000000000      | 	.quad 0xcdefab
0x1040:abefcd0000000000      | 	.quad 0xcdefab
0x1048:abefcd0000000000      | 	.quad 0xcdefab
0x1050:abefcd0000000000      | 	.quad 0xcdefab
0x1058:abefcd0000000000      | 	.quad 0xcdefab
0x1060:abefcd0000000000      | 	.quad 0xcdefab
0x1068:abefcd0000000000      | 	.quad 0xcdefab
0x1070:abefcd0000000000      | 	.quad 0xcdefab
0x1078:abefcd0000000000      | 	.quad 0xcdefab
0x1080:abefcd0000000000      | 	.quad 0xcdefab
0x1088:abefcd0000000000      | 	.quad 0xcdefab
0x1090:abefcd0000000000      | 	.quad 0xcdefab
0x1098:abefcd0000000000      | 	.quad 0xcdefab
0x10a0:abefcd0000000000      | 	.quad 0xcdefab
0x10a8:abefcd0000000000      | 	.quad 0xcdefab
0x10b0:abefcd0000000000      | 	.quad 0xcdefab
0x10b8:abefcd0000000000      | 	.quad 0xcdefab
0x10c0:abefcd0000000000      | 	.quad 0xcdefab
0x10c8:abefcd0000000000      | 	.quad 0xcdefab
0x10d0:abefcd0000000000      | 	.quad 0xcdefab
0x10d8:abefcd0000000000      | 	.quad 0xcdefab
0x10e0:abefcd0000000000      | 	.quad 0xcdefab
0x10e8:abefcd0000000000      | 	.quad 0xcdefab
0x10f0:abefcd0000000000      | 	.quad 0xcdefab
0x10f8:abefcd0000000000      | 	.quad 0xcdefab
0x1100:abefcd0000000000      | 	.quad 0xcdefab
0x1108:abefcd0000000000      | 	.quad 0xcdefab
0x1110:abefcd0000000000      | 	.quad 0xcdefab
0x1118:abefcd0000000000      | 	.quad 0xcdefab
0x1120:abefcd0000000000      | 	.quad 0xcdefab
0x1128:abefcd0000000000      | 	.quad 0xcdefab
0x1130:abefcd0000000000      | 	.quad 0xcdefab
0x1138:abefcd0000000000      | 	.quad 0xcdefab
0x1140:abefcd0000000000      | 	.quad 0xcdefab
0x1148:abefcd0000000000      | 	.quad 0xcdefab
0x1150:abefcd0000000000      | 	.quad 0xcdefab
0x1158:abefcd0000000000      | 	.quad 0xcdefab
0x1160:abefcd0000000000      | 	.quad 0xcdefab
0x1168:abefcd0000000000      | 	.quad 0xcdefab
0x1170:abefcd0000000000      | 	.quad 0xcdefab
0x1178:abefcd0000000000      | 	.quad 0xcdefab
0x1180:abefcd0000000000      | 	.quad 0xcdefab
0x1188:abefcd0000000000      | 	.quad 0xcdefab
0x1190:abefcd0000000000      | 	.quad 0xcdefab
0x1198:abefcd0000000000      | 	.quad 0xcdefab
0x11a0:abefcd0000000000      | 	.quad 0xcdefab
0x11a8:abefcd0000000000      | 	.quad 0xcdefab
0x11b0:abefcd0000000000      | 	.quad 0xcdefab
0x11b8:abefcd0000000000      | 	.quad 0xcdefab
0x11c0:abefcd0000000000      | 	.quad 0xcdefab
0x11c8:abefcd0000000000      | 	.quad 0xcdefab
0x11d0:abefcd0000000000      | 	.quad 0xcdefab
0x11d8:abefcd0000000000      | 	.quad 0xcdefab
0x11e0:abefcd0000000000      | 	.quad 0xcdefab
0x11e8:abefcd0000000000      | 	.quad 0xcdefab
0x11f0:abefcd0000000000      | 	.quad 0xcdefab
0x11f8:abefcd0000000000      | 	.quad 0xcdefab
0x1200:abefcd0000000000      | 	.quad 0xcdefab
0x1208:abefcd0000000000      | 	.quad 0xcdefab
0x1210:abefcd0000000000      | 	.quad 0xcdefab
0x1218:abefcd0000000000      | 	.quad 0xcdefab
0x1220:abefcd0000000000      | 	.quad 0xcdefab
0x1228:abefcd0000000000      | 	.quad 0xcdefab
0x1230:abefcd0000000000      | 	.quad 0xcdefab
0x1238:abefcd0000000000      | 	.quad 0xcdefab
0x1240:abefcd0000000000      | 	.quad 0xcdefab
0x1248:abefcd0000000000      | 	.quad 0xcdefab
0x1250:abefcd0000000000      | 	.quad 0xcdefab
0x1258:abefcd0000000000      | 	.quad 0xcdefab
0x1260:abefcd0000000000      | 	.quad 0xcdefab
0x1268:abefcd0000000000      | 	.quad 0xcdefab
0x1270:abefcd0000000000      | 	.quad 0xcdefab
0x1278:abefcd0000000000      | 	.quad 0xcdefab
0x1280:abefcd0000000000      | 	.quad 0xcdefab
0x1288:abefcd0000000000      | 	.quad 0xcdefab
0x1290:abefcd0000000000      | 	.quad 0xcdefab
0x1298:abefcd0000000000      | 	.quad 0xcdefab
0x12a0:abefcd0000000000      | 	.quad 0xcdefab
0x12a8:abefcd0000000000      | 	.quad 0xcdefab
0x12b0:abefcd0000000000      | 	.quad 0xcdefab
0x12b8:abefcd0000000000      | 	.quad 0xcdefab
0x12c0:abefcd0000000000      | 	.quad 0xcdefab
0x12c8:abefcd0000000000      | 	.quad 0xcdefab
0x12d0:abefcd0000000000      | 	.quad 0xcdefab
0x12d8:abefcd0000000000      | 	.quad 0xcdefab
0x12e0:abefcd0000000000      | 	.quad 0xcdefab
0x12e8:abefcd0000000000      | 	.quad 0xcdefab
0x12f0:abefcd0000000000      | 	.quad 0xcdefab
0x12f8:abefcd0000000000      | 	.quad 0xcdefab
0x1300:abefcd0000000000      | 	.quad 0xcdefab
0x1308:abefcd0000000000      | 	.quad 0xcdefab
0x1310:abefcd0000000000      | 	.quad 0xcdefab
0x1318:abefcd0000000000      | 	.quad 0xcdefab
0x1320:abefcd0000000000      | 	.quad 0xcdefab
0x1328:abefcd0000000000      | 	.quad 0xcdefab
0x1330:abefcd0000000000      | 	.quad 0xcdefab
0x1338:abefcd0000000000      | 	.quad 0xcdefab
0x1340:abefcd0000000000      | 	.quad 0xcdefab
0x1348:abefcd0000000000      | 	.quad 0xcdefab
0x1350:abefcd0000000000      | 	.quad 0xcdefab
0x1358:abefcd0000000000      | 	.quad 0xcdefab
0x1360:abefcd0000000000      | 	.quad 0xcdefab
0x1368:abefcd0000000000      | 	.quad 0xcdefab
0x1370:abefcd0000000000      | 	.quad 0xcdefab
0x1378:abefcd0000000000      | 	.quad 0xcdefab
0x1380:abefcd0000000000      | 	.quad 0xcdefab
0x1388:abefcd0000000000      | 	.quad 0xcdefab
0x1390:abefcd0000000000      | 	.quad 0xcdefab
0x1398:abefcd0000000000      | 	.quad 0xcdefab
0x13a0:abefcd0000000000      | 	.quad 0xcdefab
0x13a8:abefcd0000000000      | 	.quad 0xcdefab
0x13b0:abefcd0000000000      | 	.quad 0xcdefab
0x13b8:abefcd0000000000      | 	.quad 0xcdefab
0x13c0:abefcd0000000000      | 	.quad 0xcdefab
0x13c8:abefcd0000000000      | 	.quad 0xcdefab
0x13d0:abefcd0000000000      | 	.quad 0xcdefab
0x13d8:abefcd0000000000      | 	.quad 0xcdefab
0x13e0:abefcd0000000000      | 	.quad 0xcdefab
0x13e8:abefcd0000000000      | 	.quad 0xcdefab
0x13f0:abefcd0000000000      | 	.quad 0xcdefab
0x13f8:abefcd0000000000      | 	.quad 0xcdefab
0x1400:abefcd0000000000      | 	.quad 0xcdefab
0x1408:abefcd0000000000      | 	.quad 0xcdefab
0x1410:abefcd0000000000      | 	.quad 0xcdefab
0x1418:abefcd0000000000      | 	.quad 0xcdefab
0x1420:abefcd0000000000      | 	.quad 0xcdefab
0x1428:abefcd0000000000      | 	.quad 0xcdefab
0x1430:abefcd0000000000      | 	.quad 0xcdefab
0x1438:abefcd0000000000      | 	.quad 0xcdefab
0x1440:abefcd0000000000      | 	.quad 0xcdefab
0x1448:abefcd0000000000      | 	.quad 0xcdefab
0x1450:abefcd0000000000      | 	.quad 0xcdefab
0x1458:abefcd0000000000      | 	.quad 0xcdefab
0x1460:abefcd0000000000      | 	.quad 0xcdefab
0x1468:abefcd0000000000      | 	.quad 0xcdefab
0x1470:abefcd0000000000      | 	.quad 0xcdefab
0x1478:abefcd0000000000      | 	.quad 0xcdefab
0x1480:abefcd0000000000      | 	.quad 0xcdefab
0x1488:abefcd0000000000      | 	.quad 0xcdefab
0x1490:abefcd0000000000      | 	.quad 0xcdefab
0x1498:abefcd0000000000      | 	.quad 0xcdefab
0x14a0:abefcd0000000000      | 	.quad 0xcdefab
0x14a8:abefcd0000000000      | 	.quad 0xcdefab
0x14b0:abefcd0000000000      | 	.quad 0xcdefab
0x14b8:abefcd0000000000      | 	.quad 0xcdefab
0x14c0:abefcd0000000000      | 	.quad 0xcdefab
0x14c8:abefcd0000000000      | 	.quad 0xcdefab
0x14d0:abefcd0000000000      | 	.quad 0xcdefab
0x14d8:abefcd0000000000      | 	.quad 0xcdefab
0x14e0:abefcd0000000000      | 	.quad 0xcdefab
0x14e8:abefcd0000000000      | 	.quad 0xcdefab
0x14f0:abefcd0000000000      | 	.quad 0xcdefab
0x14f8:abefcd0000000000      | 	.quad 0xcdefab
0x1500:abefcd0000000000      | 	.quad 0xcdefab
0x1508:abefcd0000000000      | 	.quad 0xcdefab
0x1510:abefcd0000000000      | 	.quad 0xcdefab
0x1518:                      | Postdest:
0x1518:bcfade0000000000      | 	.quad 0xdefabc
                             | 
0x1520:                      | .align 8
                             | # Run time stack
0x1520:0000000000000000      | 	.quad 0
0x1528:0000000000000000      | 	.quad 0
0x1530:0000000000000000      | 	.quad 0
0x1538:0000000000000000      | 	.quad 0
0x1540:0000000000000000      | 	.quad 0
0x1548:0000000000000000      | 	.quad 0
0x1550:0000000000000000      | 	.quad 0
0x1558:0000000000000000      | 	.quad 0
0x1560:0000000000000000      | 	.quad 0
0x1568:0000000000000000      | 	.quad 0
0x1570:0000000000000000      | 	.quad 0
0x1578:0000000000000000      | 	.quad 0
0x1580:0000000000000000      | 	.quad 0
0x1588:0000000000000000      | 	.quad 0
0x1590:0000000000000000      | 	.quad 0
0x1598:0000000000000000      | 	.quad 0
                             | 
0x15a0:                      | Stack:
